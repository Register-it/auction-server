"A date and time value, represented as a string with the format: `YYYY-MM-DDTHH:MM:SS`"
scalar DateTime
"A currency value, represented as a float, e.g. `23.10`"
scalar Currency
"A string representing a valid URL"
scalar URL

"An item that can be put up for auction"
type Item {
    "The unique id of the item"
    id: ID!
    "The title of the item"
    title: String!
    "The long description of the item"
    description: String!
    "An array of image thumbnail urls"
    thumbnails("If given, limits the number of results" limit: Int): [URL!]!
    "An array of full-size image urls"
    images: [URL!]!
    "The date and time of the expiration of the auction for this item"
    auctionExpiration: DateTime!
    "The current price reached by the item in the auction"
    currentPrice: Currency!
    "The initial price of the item in the auction"
    initialPrice: Currency!
    "The current number of bids in the auction for this item"
    bidsNumber: Int!
    "Tells if this item is in the watchlist of the current logged in user (null if there is no user session available)"
    watched: Boolean
}

"A bid made on an item at an auction"
type Bid {
    "The id of the bid"
    id: ID!
    "The bidder"
    username: String!
    "The bid amount"
    amount: Currency!
    "The date and time of the bid"
    dateTime: DateTime!
}

"A page containing a list of items"
type Page {
    "The current number of the page (starting at 0)"
    current: Int!
    "The total number of the pages"
    totalPages: Int!
    "A boolean value holding true if the current page is the first page"
    isLast: Boolean!
    "A boolean value holding true if the current page is the last page"
    isFirst: Boolean!
    "The total number of paged elements"
    totalElements: Int!
    "The array of elements contained in the current page"
    elements: [Item!]!
}

"A user of the auction service"
type User {
    "First name of the user"
    firstName: String!
    "Last name of the user"
    lastName: String!
    "User profile image"
    image: URL!
    "Items watched by the user"
    watched("If given, limits the number of results" limit: Int): [Item!]!
    "Items for which the user made a bid"
    bidded("If given, limits the number of results" limit: Int): [Item!]!
    "Items awarded by the user"
    awarded("If given, limits the number of results" limit: Int): [Item!]!
}

type Query {
    "Returns a paged list of auction items"
    items(
        "Required page (defaults to 0, i.e. first page)"
        page: Int = 0,
        "Page size (i.e. number of elements in each page), defaults to 10"
        size: Int = 10
    ): Page!

    "Returns an item"
    item(
        "Id of the required item"
        id: ID!
    ): Item

    "Returns all the bids made on an item"
    bids(
        "Id of the item"
        itemId: ID!
    ) : [Bid!]!

    "Returns the current logged in user"
    me: User!
}

type Mutation {
    "Sign in the user identified by the given credentials"
    login(
        "Username identifying the user that is logging in"
        username: String!,
        "Password of the user that is logging in"
        password: String!
    ): Boolean

    "Logs out the current user"
    logout: Boolean

    "Adds an item to the watchlist of the current logged in user"
    watch(
        "Id of the item to watch"
        itemId: ID!
    ): Boolean

    "Removes an item from the watchlist of the current logged in user"
    unwatch(
        "Id of the item"
        itemId: ID!
    ): Boolean

    "Make a bid for an item, returns the last valid bid for this auction (if any)"
    bid(
        "Id of the item"
        itemId: ID!,
        "Amount of the bid"
        amount: Currency!
    ): Bid
}
